/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing
  int m1Position;
  int m2Position;
  bool on;
  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"
#include <Servo.h>

// Define Servo objects
Servo motor1;
Servo motor2;

// Define the time intervals for direction change (in milliseconds)
const unsigned long interval1 = 1000; // 1 second for motor 1
const unsigned long interval2 = 2000; // 2 seconds for motor 2

// Variables to manage time and state
unsigned long previousMillis1 = 0;
unsigned long previousMillis2 = 0;
bool direction1 = true; // true for forward, false for backward for motor 1
bool direction2 = true; // true for forward, false for backward for motor 2


void setup() {
  Serial.begin(9600); // Initialize serial and wait for port to open:
  initProperties(); // Defined in thingProperties.h
  ArduinoCloud.begin(ArduinoIoTPreferredConnection); // Connect to Arduino IoT Cloud
  // Attach servos to their respective pins
  motor1.attach(9); // Motor 1 control pin
  motor2.attach(10); // Motor 2 control pin
  
  // Start serial communication at 9600 baud
  Serial.begin(9600);

  // Initialize servo positions
  motor1.write(0); // Start at 0 degrees
  motor2.write(0); // Start at 0 degrees
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  if (on){
    // Get the current time
  unsigned long currentMillis = millis();
  
  // Check if the interval for motor 1 has passed
  if (currentMillis - previousMillis1 >= interval1) {
    // Save the last time you changed direction for motor 1
    previousMillis1 = currentMillis;
    m1Position = currentMillis;
    // Toggle the direction for motor 1
    direction1 = !direction1;
    
    // Set servo position for motor 1 based on direction
    if (direction1) {
      motor1.write(0); // Move to 0 degrees
      Serial.println("Motor 1 Direction: Forward");
    } else {
      motor1.write(225); // Move to 225 degrees
      Serial.println("Motor 1 Direction: Backward");
    }
    
    // Print the current position of motor 1 to the serial monitor
    Serial.print("Motor 1 Position: ");
    Serial.println(motor1.read());
  }
  
  // Check if the interval for motor 2 has passed
  if (currentMillis - previousMillis2 >= interval2) {
    // Save the last time you changed direction for motor 2
    previousMillis2 = currentMillis;
    m2Position = currentMillis;
    // Toggle the direction for motor 2
    direction2 = !direction2;
    
    // Set servo position for motor 2 based on direction
    if (direction2) {
      motor2.write(0); // Move to 0 degrees
      Serial.println("Motor 2 Direction: Forward");
    } else {
      motor2.write(225); // Move to 225 degrees
      Serial.println("Motor 2 Direction: Backward");
    }
    
    // Print the current position of motor 2 to the serial monitor
    Serial.print("Motor 2 Position: ");
    Serial.println(motor2.read());
  }
  
  // Small delay to ensure serial output is readable
  delay(100);
  }
  
}



/*
  Since m1Position is READ_WRITE variable, onM1PositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onM1PositionChange()  {
  // Update the position of servoA to m1Position
  motor1.write(m1Position);
}

/*
  Since m2Position is READ_WRITE variable, onM2PositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onM2PositionChange()  {
  // Update the position of servoB to m2Position
  motor2.write(m2Position);
}

/*
  Since on is READ_WRITE variable, onOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOnChange()  {

}
