/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing
  int m1Position;
  int m2Position;
  bool on;
  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"
#include <Servo.h>

// Define Servo objects
Servo servoA;
Servo servoB;

// Define servo control pins
const int servoA_Pin = 9;
const int servoB_Pin = 10;

// Define oscillation parameters
const int minAngle = 0;    // Minimum angle for oscillation
const int maxAngle = 225;  // Maximum angle for oscillation
const int stepDelay = 20;  // Delay between each step in milliseconds
const int stepSize = 1;    // Step size for each movement in degrees

void setup() {
  Serial.begin(9600); // Initialize serial and wait for port to open:
  delay(1500); // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  initProperties(); // Defined in thingProperties.h
  ArduinoCloud.begin(ArduinoIoTPreferredConnection); // Connect to Arduino IoT Cloud
  
  // Attach the servos to their respective pins
  servoA.attach(servoA_Pin);
  servoB.attach(servoB_Pin);

  // Initialize the servos to the starting position
  servoA.write(minAngle);
  servoB.write(minAngle);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

  // Check if the "on" variable is true to run the servo oscillation
  if (on) {
    oscillateServo(servoA, m1Position);
    oscillateServo(servoB, m2Position);
  }
}

void oscillateServo(Servo &servo, int &position) {
  // Move from minAngle to maxAngle
  for (int pos = minAngle; pos <= maxAngle; pos += stepSize) {
    servo.write(pos);
    if (servo == servoA) {
      m1Position = pos;  // Update m1Position
    } else if (servo == servoB) {
      m2Position = pos;  // Update m2Position
    }
    delay(stepDelay);
  }
  // Move from maxAngle to minAngle
  for (int pos = maxAngle; pos >= minAngle; pos -= stepSize) {
    servo.write(pos);
    if (servo == servoA) {
      m1Position = pos;  // Update m1Position
    } else if (servo == servoB) {
      m2Position = pos;  // Update m2Position
    }
    delay(stepDelay);
  }
}

/*
  Since m1Position is READ_WRITE variable, onM1PositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onM1PositionChange()  {
  // Update the position of servoA to m1Position
  servoA.write(m1Position);
}

/*
  Since m2Position is READ_WRITE variable, onM2PositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onM2PositionChange()  {
  // Update the position of servoB to m2Position
  servoB.write(m2Position);
}

/*
  Since on is READ_WRITE variable, onOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOnChange()  {

}
